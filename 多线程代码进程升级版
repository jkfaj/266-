from datetime import datetime
import os
import glob 
import base64
import hashlib
import hmac
import requests
import time
import uuid
from urllib import parse
import pandas as pd
import http.client
import json
from pydub import AudioSegment
from pydub.silence import split_on_silence
import threading
import you_get
import numpy as np
import subprocess
import zipfile
import shutil
import multiprocessing
import requests
import re
import json
from lxml import etree
from concurrent.futures import ThreadPoolExecutor

'''多人多链接
   将压缩包移动到指定文件夹，如果之前文件夹有重名，处理方式
   b站如果是一个列表应该怎么下载，或者备注
   多参数问题
'''
'''
全局变量声明
'''
default_silence=630
default_thresh=-30

#改后缀的地方
hzcontent='（素材分享群：123593137，获取更多素材）.mp3'
       

rootpath='C:\\Users\\Administrator\\Desktop\\test2\\'
to_split_path=rootpath+'to_split_audio\\'
if not os.path.exists(to_split_path):os.mkdir(to_split_path)
chunkspath=rootpath+'chunks\\'
wavpath=rootpath+'转wav\\'
logpath=rootpath+'日志\\'
txtpath='C:\\Users\\Administrator\\Desktop\\下载链接.txt'

data_total=pd.DataFrame(data=None,columns=['编号','语音内容'])

ziptofile='E:\\test2\\新版语音包纯净版本\\'
ziptofile_hz='E:\\test2\\新版语音包带后缀版本\\'

headers = {
    'Referer': 'https://www.bilibili.com/',
    'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'
}



#阿里云参数
access_key_id = 'LTAI5tDCdQARDVh2XYMjJGLa'
access_key_secret = 'znwuFhoqj6i9ojEwZWuPE4Hmp8anzs'
appKey = 'gF3HRZAKLeo6uD84'

class AccessToken:
    @staticmethod
    def _encode_text(text):
        encoded_text = parse.quote_plus(text)
        return encoded_text.replace('+', '%20').replace('*', '%2A').replace('%7E', '~')
    @staticmethod
    def _encode_dict(dic):
        keys = dic.keys()
        dic_sorted = [(key, dic[key]) for key in sorted(keys)]
        encoded_text = parse.urlencode(dic_sorted)
        return encoded_text.replace('+', '%20').replace('*', '%2A').replace('%7E', '~')
    @staticmethod
    def create_token(access_key_id, access_key_secret):
        parameters = {'AccessKeyId': access_key_id,
                      'Action': 'CreateToken',
                      'Format': 'JSON',
                      'RegionId': 'cn-shanghai',
                      'SignatureMethod': 'HMAC-SHA1',
                      'SignatureNonce': str(uuid.uuid1()),
                      'SignatureVersion': '1.0',
                      'Timestamp': time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime()),
                      'Version': '2019-02-28'}
        # 构造规范化的请求字符串
        query_string = AccessToken._encode_dict(parameters)
        #print('规范化的请求字符串: %s' % query_string)
        # 构造待签名字符串
        string_to_sign = 'GET' + '&' + AccessToken._encode_text('/') + '&' + AccessToken._encode_text(query_string)
        #print('待签名的字符串: %s' % string_to_sign)
        # 计算签名
        secreted_string = hmac.new(bytes(access_key_secret + '&', encoding='utf-8'),
                                   bytes(string_to_sign, encoding='utf-8'),
                                   hashlib.sha1).digest()
        signature = base64.b64encode(secreted_string)
        #print('签名: %s' % signature)
        # 进行URL编码
        signature = AccessToken._encode_text(signature)
        #print('URL编码后的签名: %s' % signature)
        # 调用服务
        full_url = 'http://nls-meta.cn-shanghai.aliyuncs.com/?Signature=%s&%s' % (signature, query_string)
        # print('url: %s' % full_url)
        # 提交HTTP GET请求
        response = requests.get(full_url)
        if response.ok:
            root_obj = response.json()
            key = 'Token'
            if key in root_obj:
                token = root_obj[key]['Id']
                expire_time = root_obj[key]['ExpireTime']
                return token, expire_time
        #print(response.text)
        return None, None

token, expire_time = AccessToken.create_token(access_key_id, access_key_secret)
url = 'https://nls-gateway-cn-shanghai.aliyuncs.com/stream/v1/asr'
format = 'pcm'
sampleRate = 16000
enablePunctuationPrediction  = True
enableInverseTextNormalization = True
enableVoiceDetection  = False

request = url + '?appkey=' + appKey
request = request + '&format=' + format
request = request + '&sample_rate=' + str(sampleRate)

if enablePunctuationPrediction :
    request = request + '&enable_punctuation_prediction=' + 'true'

if enableInverseTextNormalization :
    request = request + '&enable_inverse_text_normalization=' + 'true'

if enableVoiceDetection :
    request = request + '&enable_voice_detection=' + 'true'






def remove_file(*path,type=all):
    '''函数作用就是删除不同指定路径下指定格式的文件
        type 必须是.mp3区分文件夹跟文件
        path必须是末尾返斜杠
    '''
    for i in range(0,len( path),1):
        
        if type=='all':
            newpath=path[i]+'*'
            for file in glob.glob(newpath):
                os.remove(file)
        else :
            newpath=path[i]
            for f in os.listdir(newpath):
                if  f.endswith(type):
                    os.remove(newpath+f)



    
   # os.system("you-get -o "+downloadfile+ ' -O '+ name+ "  "+url )



# 获取有分p的所有视频的音频
def get_all_url(start_url):
    video_code = start_url.split('/')[4][:12] #提取B站视频的编号
    res = requests.get(url=start_url, headers=headers).text
    pattern_ = '<script>window.__INITIAL_STATE__=(.*?);\(function' # 提取分p视频列表信息的json数据
    n_ = re.findall(pattern_, res, re.S)
    xx_json = json.loads(n_[0])
    names = xx_json['videoData']['pages']# 提取分p视频的所有标题
    return names, video_code

# 获取没有分p视频的音频文件
def get_mp3(url_,title):
    response = requests.get(url_, headers).text
    tree = etree.HTML(response)
    pattern = '<script>window\.__playinfo__=(.*?)</script>' #提取音频url
    list_ = re.findall(pattern, response, re.S)
    list_json = json.loads(list_[0])
    #title = tree.xpath('//*[@id="viewbox_report"]/h1/span/text()')[0] # 获取标题
    volume_url = list_json['data']['dash']['audio'][0]['baseUrl']
   # print(volume_url)
    PATH = to_split_path + title + '.mp3'#保存路径
    audio = requests.get(url=volume_url, headers=headers).content
    with open(PATH, 'wb') as f:
        f.write(audio)
    print('下载完成')


def single():

    datam=dataurl
    namelist=[]
    urllist=[]
    silencelist=[]
    threshlist=[]
    for i in range(0,len(datam),1):
        if datam.loc[i,0][0:4]!='http':
            name=datam.loc[i,0].split()
            print(name)
            namelist.append(name[0])
            urllist.append(i)
            if len(name)>1:
                silencelist.append(name[1])
                threshlist.append(name[2])
            else:
                silencelist.append(default_silence)
                threshlist.append(default_thresh)
    return namelist,urllist,silencelist,threshlist
    
    



def dataframe_trans(namelist,urllist,dataurl):
#构建新的dataframe  格式的转换
    data_new_url=pd.DataFrame(data=None,columns=['人物名字','url链接'])
    for i in range(0,len(namelist),1):
         if i==(len(namelist)-1):
             data_url=dataurl[urllist[i]+1:]
             data_url.rename(columns={0:'url链接'},inplace=True)
             
             data_url.loc[:,'人物名字']=namelist[i]
             data_new_url=pd.concat([data_new_url,data_url])
             
         else:
             
             data_url=dataurl[urllist[i]+1:urllist[i+1]]
             data_url.rename(columns={0:'url链接'},inplace=True)
             
             data_url.loc[:,'人物名字']=namelist[i]
             data_new_url=pd.concat([data_new_url,data_url])


    return data_new_url


def file_make(namelist):
#创建文件夹 chunks  to_split_audio 转wav
    if len(namelist)>0:
        for i in namelist:
            # to_split_file=to_split_path+i+'\\'   
            chunks_file=chunkspath+i+'\\'
            pcm_file=wavpath+i+'\\'
            
            # if not os.path.exists(to_split_file):os.mkdir(to_split_file)
            if not os.path.exists(chunks_file):os.mkdir(chunks_file)
            if not os.path.exists(pcm_file):os.mkdir(pcm_file)







def to_pcm(path,file):
#将文件夹下平均分成多少份，然后运行多线程   ,如果大于400条，多线程 
    mp3name=path.split("\\")[-1]
    pcm_name=wavpath+file+'\\'+os.path.splitext(mp3name)[0]+'.pcm'
    print(pcm_name)
    code=' ffmpeg -y -i ' +path+' -acodec pcm_s16le -f s16le -ac 1 -ar 16000 '+pcm_name
    os.system(code)






def split_trans(audiopath,audioname,min_silence_len=default_silence,silence_thresh=default_thresh):
    
#定义分解转换，方便后面多线程调用，阿里云单独两个线程

    
    sound = AudioSegment.from_file(audiopath, format='mp3')
    chunks = split_on_silence(sound,min_silence_len,silence_thresh,keep_silence=800)#min_silence_len: 拆分语句时，静默满0.3秒则拆分。silence_thresh：小于-70dBFS以下的为静默。
    #if not os.path.exists(chunks_path):os.mkdir(chunks_path)
    print(len(chunks))
    for i in range(len(chunks)):
        new = chunks[i]
        save_name = chunkspath+audioname+'\\'+audioname+'%06d.%s'%(i,'mp3')
        new.export(save_name, format='mp3')
       # mp3name=save_name.split("\\")[-1]
       # pcm_name=wavpath+os.path.splitext(mp3name)[0]+'.pcm'
       # code='start ffmpeg -y -i ' +save_name+' -acodec pcm_s16le -f s16le -ac 1 -ar 16000 '+pcm_name
       # os.system(code)
        #subprocess.check_output(code,shell=True)







def process(request, token, audioFile) :

#阿里云第一段代码


    # 读取音频文件
    with open(audioFile, mode = 'rb') as f:
        audioContent = f.read()

    host = 'nls-gateway-cn-shanghai.aliyuncs.com'

    # 设置HTTPS请求头部
    httpHeaders = {
        'X-NLS-Token': token,
        'Content-type': 'application/octet-stream',
        'Content-Length': len(audioContent)
        }


    # Python 2.x使用httplib
    # conn = httplib.HTTPConnection(host)

    # Python 3.x使用http.client
    conn = http.client.HTTPConnection(host)
    conn.request(method='POST', url=request, body=audioContent, headers=httpHeaders)
    response = conn.getresponse()
    # print('Response status and response reason:')
    # print(response.status ,response.reason)
    body = response.read()
    try:
        # print('Recognize response is:')
        body = json.loads(body)
        # print(body)

        status = body['status']
        if status == 20000000 :
            result = body['result']
#           # print('Recognize result: ' + result)
            return result
        else :
            print('Recognizer failed!')

    except ValueError:
        print('The response is not json format string')

    conn.close()



def part_aliyun(aliyun_wav):

#批量上传到阿里云，2个线程

    result= process(request, token, aliyun_wav)

    dic ={'编号':num,'语音内容':result}
    print(num,result)
    data1=pd.DataFrame(dic,index=[0])
    data_total=data_total.append(data1,ignore_index=True)

    
        

def rename_mp3(name):
    
#重新命名
    rename_file=chunkspath+name+'\\'

    data2=data[data_total['编号'].str.contains(name)]

    datadup=data2[data2.duplicated('语音内容',keep='False')]
    datadup.sort_values(by=['语音内容'],inplace=True)
    #重复值进行排序
    datadup['排序']=1
    dupnum=1
    for i in range(1,len(datadup),1):
        while datadup.loc[i,'语音内容']==datadup.loc[i-1,'语音内容']:
            dupnum+=1
            datadup.loc[i,'排序']=dupnum
        datadup.loc[i,'排序']=dupnum
    datadup['排序']=datadup['排序'].astype(str)
    datadup['重复值']=datadup['语音内容']+datadup['排序']
    datadup=datadup.drop(['语音内容','排序'],axis=1)
    #data3重复数据重新命名
    dataleft= pd.merge(left=data2,right=datadup,on='编号',how='left')   
    for i in  range(0,len(dataleft),1):
        if dataleft.loc[i,'重复值'].notnull():
            dataleft.loc[i,'语音内容']=dataleft.loc[i,'重复值']+'_duplicates'
    data2=dataleft.drop(['重复值'],axis=1)

    data3=data2.groupby(data2['编号'])['语音内容'].apply(lambda x:x.str.cat(sep=''))
    no_logo=['*',':','\'','<','>','|','\\','/','?']

    for i in no_logo:
        data3 =data3.apply(lambda x:x.replace( i,''))
        data3=data3.apply(lambda x:x[:80] if len(x)>81 else x)
    data3=data3.dropna(axis=0,how='any')
    data3.drop(data3[data3.values==''].index,inplace=True)
    #  data3.drop_duplicates(keep='first',inplace=True)
    for i in os.listdir(rename_file):
        for j in data3.index:
            jstr=str(j)
            #jj=jstr.zfill(6)

            if os.path.splitext(i)[0]==jj:
                old_file=rename_file+i
               #好兄弟加后缀的话放在这里，下面带#的代码就是例子，比这来
      #        new_file=rename_file+data3[j]+'（素材分享群：123593137，获取更多素材）.mp3'
                new_file=rename_file+data3[j]+'.mp3'
                os.rename(old_file,new_file)

    data2['编号']=data2['编号'].astype(str)

    for i in os.listdir(rename_file):
        for j in data2['编号']:
            jstr=str(j)
            # jj=jstr.zfill(6)
            if os.path.exists(rename_file+jj+'.mp3'):
                os.remove(rename_file+jj+'.mp3')
def houzhui(name):

  # 增加一个后缀版本
    file_path=chunkspath+'\\'+name+'\\'
 
    for i in os.listdir(file_path):
        oldname=file_path+i
        newi=os.path.splitext(i)[0]
        newname=file_path+newi+hzcontent
        os.rename(oldname,newname)
                


def zipDir(name,output_file):
    """
    压缩指定文件夹
    :param source_dir: 目标文件夹路径
    :param output_filename: 压缩文件保存路径+xxxx.zip
    :return: 无
    """
    source_dir=chunkspath+name+'\\'
    #output_file=chunkspath+name+'zip'
    if os.path.exists(source_dir):
        # compression压缩比例，默认是不压缩，ZIP_LZMA=14级别的压缩，影响的是时间，但是包能更小
        # vue使用级别=9的，var archive = archiver('zip', {zlib: {level: 9}});
        # mac install: brew install xz
        # mode 解压是 r , 压缩是 w 追加压缩是 a
        # compression 为  zipfile.ZIP_DEFLATED，zipfile.ZIP_STORED， zipfile.ZIP_LZMA
        zipf = zipfile.ZipFile(file=output_filename, mode='w', compression=zipfile.ZIP_LZMA)
        # zipf = zipfile.ZipFile(file=output_filename, mode='w', compression=zipfile.ZIP_DEFLATED)
        pre_len = len(os.path.dirname(source_dir))
        for parent, dirnames, filenames in os.walk(source_dir):
            for filename in filenames:
                pathfile = os.path.join(parent, filename)
                arcname = pathfile[pre_len:].strip(os.path.sep)  # 相对路径
                zipf.write(pathfile, arcname)
        zipf.close()
        return output_filename
    return

def movefile(name):

#复制到指定位置，然后解决重名问题j要是重名了 改名


    num=1

    for j in os.listdir(chunkspath):
        if j.endswith('_hz.zip'):
            ziphzname=os.path.splitext(j)[0]
        if j.endswith('语音包新版本.zip'):
            zipname=os.path.splitext(j)[0]
      #用后缀版本解决重命名     
    for i in os.listdir(ziptofile):
        
        while os.path.splitext(i)[0]==zipname:
            if num>1:
                
                zipname=zipname.split('_')[0]+'_'+str(num)
            else:
                num+=1
                
                zipname=zipname+'_'+str(num)

    for i in os.listdir(ziptofile_hz):
        while os.path.splitext(i)[0]==ziphzname:
            if num>1:
                
                ziphzname=ziphzname.split('_')[0]+'_hz_'+str(num)
            else:
                num+=1
                
                ziphzname=ziphzname+'_'+str(num)
    
    shutil.copy(chunkspath+name+'语音包新版本.zip',ziptofile+zipname+'.zip')
    shutil.copy(chunkspath+name+'语音包新版本_hz.zip',ziptofile_hz+ziphzname+'.zip')
 

def re_zip_m(name):
    rename_mp3(name)
    zipDir(name,chunkspath+name+'语音包新版本.zip')
    houzhui()
    zipDir(name,chunkspath+name+'语音包新版本_hz.zip')
   # movefile(name)
    


def execute_one():

 # 不走链接的代码
    #if not os.path.exists(chunkspath+'to_rename'):os.mkdir(chunkspath+'to_rename')
    #if not os.path.exists(wavpath+'to_rename'):os.mkdir(wavpath+'to_rename')

      #格式转换多进程，批量做
    trans_pool=multiprocessing.Pool(processes = 11)
    for i in os.listdir(chunkspath):
        for j in os.listdir(chunkspath+i+'\\'):
            trans_path=chunkspath+i+'\\'+j
            trans_pool.apply_async(to_pcm,trans_path,i)

    
    trans_pool.close()
    trans_pool.join()

      #阿里云多线程
       
    ali_pool = ThreadPoolExecutor(max_workers=2)
    for i in os.listdir(wavpath):
        for j in os.listdir(wavpath+i+'\\'):
            trans_path=wavpath+i+'\\'+j
            ali_pool.submit(part_aliyun,trans_path)
    ali_pool.shutdown()
    now_time=datetime.now().strftime('%Y%m%d%H%M%S')
    log_file=rootpath+"日志\\"+now_time+'.txt'
    data_total.to_csv(log_file,index=False,sep=' ')
    

        #改名，压缩，移动
    re_zip_pool=multiprocessing.Pool(processes = 11)
    for i in os.listdir(chunkspath):
        print(i)
            
        re_zip_pool.apply_async(re_zip_m,i)
    re_zip_pool.close()
    re_zip_pool.join()
    

 


if __name__ == "__main__":
    timetotal1=datetime.now()

     #下载完成之后清空桌面下载链接,重新做已经存在，跑新的就不为空
    #调整，多人物怎么调整
    if  os.path.exists(chunkspath):
        shutil.rmtree(chunkspath)
    if not os.path.exists(chunkspath):os.mkdir(chunkspath)
    if os.path.exists(wavpath):
        shutil.rmtree(wavpath)
    if not os.path.exists(wavpath):os.mkdir(wavpath)
    if os.path.getsize(txtpath)>1:
        #下载txt上面链接

        dataurl=pd.read_csv(txtpath,header=None,sep='\n')
        print('正在下载链接中语音')
        dataurl
        remove_file(to_split_path,type='all')
        namelist,urllist,silencelist,threshlist=single()
        data_new_url=dataframe_trans(namelist,urllist,dataurl)
        data_new_url=data_new_url.reset_index(drop=True)
        data_new_url.sort_values('人物名字',ascending=True,inplace=True)
        data_new_url.loc[:,'文件名']=1
        for i in range(0,len(data_new_url),1):
            data_new_url.loc[i,'文件名']=data_new_url.loc[i,'人物名字']+'_'+str(i)
        #data_new_url需要再处理有问题
        #data_new_url['silence']
        #data_new_url['thresh']
        data_new_url
        file_make(namelist)


       #开启线程池
        url_pool = ThreadPoolExecutor(max_workers=10)
        datetime1=datetime.now()
        for i in range(0,len(data_new_url),1):
            url=data_new_url.loc[i,'url链接']
            name=data_new_url.loc[i,'文件名']
           
            url_pool.submit(get_mp3,url,name)

        url_pool.shutdown()
        datetime2=datetime.now()
        print('下载花费时间：',datetime2-datetime1)

       #切分开启进程池
        split_pool = multiprocessing.Pool(processes = 11)
        for i in os.listdir(to_split_path):
            to_split=to_split_path+i
            to_trans_name=os.path.splitext(i)[0]
            to_name=data_new_url.loc[data_new_url['文件名']==to_trans_name,'人物名字'].iloc[0]
            silence=silencelist[namelist.index(to_name)]
            thresh=threshlist[namelist.index(to_name)]
            print(to_name)
            print(silence)
            print(thresh)

            split_pool.apply_async(split_trans,to_split,to_name,silence,thresh)
   



      #关掉线程池，关掉进程池
        split_pool.close()
        split_pool.join()
        execute_one()
    else:
        if not os.path.exists(chunkspath+'to_rename'):os.mkdir(chunkspath+'to_rename')
        if not os.path.exists(wavpath+'to_rename'):os.mkdir(wavpath+'to_rename')
           #切分开启进程池
        split_pool = multiprocessing.Pool(processes = 11)
        for i in os.path.listdir(to_split_path):
            to_split=to_split_path+i

            to_name='to_rename'          # silence=silencelist[namelist.index(to_name)]

            print(to_name)
       
            split_pool.apply_async(split_trans,to_split,to_name)
        split_pool.close()
        split_pool.join()
        execute_one()
   



    

        
        



    #file= open(txtpath,'w').close()
    timetotal2=datetime.now()
    time_total=timetotal2-timetotal1
    print('代码运行总时间',time_total)





   
   

 



